apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: etcd-{{.Name}}
  namespace: {{.Namespace}}
  labels:
    app: etcd
    sts: etcd-{{.Name}}
spec:
  serviceName: etcd-{{.Name}}
  replicas: {{.Replicas}}
  selector:
    matchLabels:
      app: etcd
      sts: etcd-{{.Name}}
  template:
    metadata:
      name: etcd
      labels:
        app: etcd
        sts: etcd-{{.Name}}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
           - weight: 100
             podAffinityTerm:
               labelSelector:
                 matchExpressions:
                 - key: "sts"
                   operator: In
                   values:
                   - etcd-{{.Name}}
               topologyKey: "topology.kubernetes.io/zone"
      containers:
      - name: etcd
        image: {{.EtcdImage}}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 2380
          name: peer
        - containerPort: 2379
          name: client
        resources:
          requests:
            cpu: 100m
            memory: 512Mi
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: INITIAL_CLUSTER_SIZE
          value: "3"
        - name: SET_NAME
          value: etcd-{{.Name}}
        - name: ETCD_PEER_AUTO_TLS
          value: "true"
        - name: ETCD_CERT_FILE
          value: "/opt/etcd/certs/client/etcd-client.crt"
        - name: ETCD_KEY_FILE
          value: "/opt/etcd/certs/client/etcd-client.key"
        - name: ETCD_CLIENT_CERT_AUTH
          value: "true"
        - name: ETCD_TRUSTED_CA_FILE
          value: "/opt/etcd/certs/client/etcd-ca.crt"
        volumeMounts:
        - name: datadir
          mountPath: /var/run/etcd
        - name: etcd-client-certs
          mountPath: /opt/etcd/certs/client/
          readOnly: true
        lifecycle:
          preStop:
            exec:
              command:
                - "/bin/sh"
                - "-ec"
                - |
                  EPS=""
                  for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                      EPS="${EPS}${EPS:+,}https://${SET_NAME}-${i}.${SET_NAME}:2379"
                  done
                  HOSTNAME=$(hostname)
                  AUTH_OPTIONS="--cert=${ETCD_CERT_FILE} --key=${ETCD_KEY_FILE} --cacert=${ETCD_TRUSTED_CA_FILE}"                
                  member_hash() {
                      etcdctl $AUTH_OPTIONS member list | grep https://${HOSTNAME}.${SET_NAME}:2380 | cut -d':' -f1 | cut -d'[' -f1
                  }
                  SET_ID=${HOSTNAME##*[^0-9]}
                  if [ "${SET_ID}" -ge ${INITIAL_CLUSTER_SIZE} ]; then
                      echo "Removing ${HOSTNAME} from etcd cluster"
                      ETCDCTL_ENDPOINT=${EPS} etcdctl $AUTH_OPTIONS member remove $(member_hash)
                      if [ $? -eq 0 ]; then
                          # Remove everything otherwise the cluster will no longer scale-up
                          rm -rf /var/run/etcd/*
                      fi
                  fi
        command:
          - "/bin/sh"
          - "-ec"
          - |
            HOSTNAME=$(hostname)
            AUTH_OPTIONS="--cert=${ETCD_CERT_FILE} --key=${ETCD_KEY_FILE} --cacert=${ETCD_TRUSTED_CA_FILE}"
            # store member id into PVC for later member replacement
            collect_member() {               
                while ! etcdctl $AUTH_OPTIONS member list &>/dev/null; do sleep 1; done
                etcdctl $AUTH_OPTIONS member list | grep https://${HOSTNAME}.${SET_NAME}:2380 | cut -d':' -f1 | cut -d'[' -f1 > /var/run/etcd/member_id               
                exit 0
            }
            eps() {
                EPS=""
                for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                    EPS="${EPS}${EPS:+,}https://${SET_NAME}-${i}.${SET_NAME}:2379"
                done
                echo ${EPS}
            }
            member_hash() {
                etcdctl $AUTH_OPTIONS member list | grep https://${HOSTNAME}.${SET_NAME}:2380 | cut -d':' -f1 | cut -d'[' -f1
            }
            # we should wait for other pods to be up before trying to join
            # otherwise we got "no such host" errors when trying to resolve other members
            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                while true; do
                    echo "Waiting for ${SET_NAME}-${i}.${SET_NAME} to come up"
                    ping -W 1 -c 1 ${SET_NAME}-${i}.${SET_NAME} > /dev/null && break
                    sleep 1s
                done               
            done
             
            # re-joining after failure?
            if [ -e /var/run/etcd/default.etcd ]; then
                echo "Re-joining etcd member"
                member_id=$(cat /var/run/etcd/member_id)
                # re-join member
                ETCDCTL_ENDPOINT=$(eps) etcdctl $AUTH_OPTIONS member update ${member_id} https://${HOSTNAME}.${SET_NAME}:2380 | true
                exec etcd --name ${HOSTNAME} \
                    --listen-peer-urls https://0.0.0.0:2380 \
                    --listen-client-urls https://0.0.0.0:2379\
                    --advertise-client-urls https://${HOSTNAME}.${SET_NAME}:2379 \
                    --data-dir /var/run/etcd/default.etcd
                     
            fi
            # etcd-SET_ID
            SET_ID=${HOSTNAME##*[^0-9]}
            # adding a new member to existing cluster (assuming all initial pods are available)
            if [ "${SET_ID}" -ge ${INITIAL_CLUSTER_SIZE} ]; then
                export ETCDCTL_ENDPOINT=$(eps)
                # member already added?
                MEMBER_HASH=$(member_hash)
                if [ -n "${MEMBER_HASH}" ]; then
                    # the member hash exists but for some reason etcd failed
                    # as the datadir has not be created, we can remove the member
                    # and retrieve new hash
                    etcdctl $AUTH_OPTIONS member remove ${MEMBER_HASH}
                fi
                echo "Adding new member"
                etcdctl $AUTH_OPTIONS member add ${HOSTNAME} https://${HOSTNAME}.${SET_NAME}:2380 | grep "^ETCD_" > /var/run/etcd/new_member_envs
                if [ $? -ne 0 ]; then
                    echo "Exiting"
                    rm -f /var/run/etcd/new_member_envs
                    exit 1
                fi
                cat /var/run/etcd/new_member_envs
                source /var/run/etcd/new_member_envs
                collect_member &
                exec etcd --name ${HOSTNAME} \
                    --listen-peer-urls https://0.0.0.0:2380 \
                    --listen-client-urls https://0.0.0.0:2379 \
                    --advertise-client-urls https://${HOSTNAME}.${SET_NAME}:2379 \
                    --data-dir /var/run/etcd/default.etcd \
                    --initial-advertise-peer-urls https://${HOSTNAME}.${SET_NAME}:2380 \
                    --initial-cluster ${ETCD_INITIAL_CLUSTER} \
                    --initial-cluster-state ${ETCD_INITIAL_CLUSTER_STATE}
                     
            fi
            PEERS=""
            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                PEERS="${PEERS}${PEERS:+,}${SET_NAME}-${i}=https://${SET_NAME}-${i}.${SET_NAME}:2380"
            done
            collect_member &
            # join member
            exec etcd --name ${HOSTNAME} \
                --initial-advertise-peer-urls https://${HOSTNAME}.${SET_NAME}:2380 \
                --listen-peer-urls https://0.0.0.0:2380 \
                --listen-client-urls https://0.0.0.0:2379 \
                --advertise-client-urls https://${HOSTNAME}.${SET_NAME}:2379 \
                --initial-cluster-token etcd-cluster-1 \
                --initial-cluster ${PEERS} \
                --initial-cluster-state new \
                --data-dir /var/run/etcd/default.etcd
      volumes:
      - name: etcd-client-certs
        secret:
          secretName: etcd-{{.Name}}-client-certs
          defaultMode: 256
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      storageClassName: hostpath-provisioner
      volumeMode: Filesystem
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          # upstream recommended max is 700M
          storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: etcd-{{.Name}}
  namespace: {{.Namespace}}
  labels:
    app: etcd
    sts: etcd-{{.Name}}
spec:
  ports:
  - port: 2380
    name: etcd-server
  - port: 2379
    name: etcd-client
  clusterIP: None
  selector:
    app: etcd
    sts: etcd-{{.Name}}
  publishNotReadyAddresses: true
